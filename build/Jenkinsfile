pipeline {
  agent any

  options {
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '5'))
  }

  triggers {
    cron '@midnight'
  }

  stages {
    stage('NPM:swagger-ui-ivy') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'npm install && npm run build && npm run sbom'
            }
          }
          archiveArtifacts artifacts: 'dist/**', allowEmptyArchive: false
          currentBuild.description = "<a href='${BUILD_URL}artifact/dist/index.html'>swagger-ui</a>"
        }
      }
    }    
    stage('NPM:test') {
      steps {
        script {
          catchError(buildResult: 'UNSTABLE', stageResult: 'UNSTABLE') {
            docker.build('node', '-f build/Dockerfile .').inside {
              sh 'npm run test'
            }
          }
          archiveArtifacts artifacts: 'playwright-report/**', allowEmptyArchive: false
        }
      }
    }
    stage('bom') {
      steps {
        script {
          if (isReleasingBranch()) {
            docker.build('maven-build', '-f build/Dockerfile.maven .').inside {        
              def version = sh (script: "mvn help:evaluate -Dexpression=project.version -q -DforceStdout", returnStdout: true)
              maven cmd: '-f build/sbom/pom.xml clean deploy'
              uploadBOM(projectName: 'swagger-ui-ivy', projectVersion: version, bomFile: 'bom.json')
            }
          }
        }
      }
    }
    stage('Deploy') {
      when {
        expression { isReleasingBranch() && currentBuild.changeSets.size() > 0 }
      }
      steps {
        script {
          docker.build('maven-build', '-f build/Dockerfile.maven .').inside {
            maven cmd: 'clean deploy'
          }
          archiveArtifacts 'target/swagger-ui-ivy-*.jar'
        }
      }
    }
  }
}
